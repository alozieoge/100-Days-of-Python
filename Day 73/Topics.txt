Topic: Aggregate and Merge Data in Pandas

Project: Analyse a dataset of LEGO prices

Notebook: Google Drive / Day 73 / Lego_Analysis_for_Course_(start).ipynb

Lessons:
1. Combine a Notebook with HTML Markup.
2. Apply List slicing techniques to Pandas DataFrames.
3. Aaggregate data using the .agg() function.
4. Create scatter plots, bar charts, and line charts with two axes in Matplotlib.
5. Understand database schemas that are organised by primary and foreign keys.
6. Merge DataFrames that share a common key.

Steps:
0. Upload and setup notebook. 

1. Use HTML Markdown to prettify notebook.
   a. To add image to Text field:
        <img src='https://...'>
   b. To add section headings:
        # ... <h1>
        ## ... <h2>
        ### ... <h3>
        #### ... <h4>
        ##### ... <h5>

2. Data Exploration - Unique Colors
   a. To get number of unique items in all columns:
        df.nunique(axis=0)
   b. To get the number of values per category:
        df.groupby('is_trans').count()
        # OR
        df['is_trans'].value_counts()

3. Data Exploration - Number of Sets
   a. To sort the dataFrame by a column:
        df.sort_values(by='year', ascending=True)
   b. To filter a dataFrame by a column value:
        df[df['year']==1949]
        
4. Visualise the Number of Sets Published over Time
   a. Get the number of parts produced by year. 
        df.groupby('year').count()
   b. Make a new dataFrame where index=year and values=num_parts
        new_df = pd.DataFrame(df.groupby('year').count()['num_parts']
   c. Plot the number of parts over time
        plt.plot(new_df.index, new_df.num_parts)
   d. You can slice a dataFrame like a Python list or just slice the column series.
        df[:-2]
        # OR
        df['num_parts'][:-2]
        
5. Aggregate a dataFrame with the .agg() function
   a. agg() function:
        .agg({'column1': operation1, 'column2': operation2, ...})
   b. To get the number of unique themes per year:
        df.groupby('year').agg({'theme_id': pd.Series.nunique})
   c. To rename a dataFrame column:
        df.rename(columns={'theme_id': ''num_theme'}, inplace=True)
    
 6. Superimposing Line Charts with Separate Axes
    a. To plot lines on 2 separate y-axes, get the first axes object and create a second axes that shares the same x-axes as the first.
         ax1 = plt.gca()
         ax2 = ax1.twinx()
    b. Plot using the axes instead of plt
         ax1.plot(..., color='b')
         ax2.plot(..., color='g')
 
 7. a. Scatter plot
         plt.scatter(x=..., y=...)
 
 8. Relational Database Schemas - Primary and Foreign Keys
    a. DB Schema is how the database is organised, by tables and keys.
    b. Relational database tables can be linked by primary and foreign keys.
       Primary key = Unique id in table
       Foreign key = id in another table that can have repeated use.
       
 9. Merge DataFrames and Create Bar Charts
    a. 
       
