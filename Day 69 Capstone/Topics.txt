Project: Add users to our Blog project.

Objective: Implement user authentication so that users can sign up and comment on our blog post.

Lesson:
1. Create decorator function admin_only() to handle admin authentication.
2. 

Steps:
0. Download the starting project files + database and install required packages. âœ…ðŸ”°

1. Register new users
   a. Install missing packages - flask_wtf, email_validator. âœ…
   b. Allow users to go to the /register route to sign up to your blog website. âœ…
      Create a WTForm in forms.py called RegisterForm and use Flask-Bootstrap to render a wtf quick_form.
   c. Use the generate_password_hash() to hash and salt the provided user password before writing it to the database. âœ…
   d. Redirect to the Home page after sign up. âœ…

2. Login registered users
   a. Users who have been successfully registered (added to the user table in the database) should be able to go to the /login route to use their credentials to log in. âœ…
   b. Add 1 line of code in the /register route so that when users successfully register they are taken back to the home page and are logged in with Flask-Login. âœ…
   c. In the in the /register route, if a user is trying to register with an email that already exists in the database, they should be redirected to the /login route. âœ…
      A flash message will tell them to log in with that email instead.
   d. In the /login route, if a user's email does not exist in the database or if their password does not match the one stored using check_password(), they should be redirected back to /login and a flash message to let them know what the issue was and ask them to try again. âœ…
   d. Implement the load_user() callback function for the login_manager.user_loader decorator. âœ…
   e. Login the user if successful with flask_login login_user(). âœ…
   e. Update the navbar so that when a user is logged, it does not show the 'Register' and 'Login' menu options. âœ…
   f. Code up the /logout route so that when the user clicks on the LOG OUT button, it logs them out and takes them back to the home page. âœ…

3. Protect routes
   The first registered user will be the admin. They will be able to create new blog posts, edit posts and delete posts
   a. The first user's id is 1. Use this in index.html and post.html to make sure that only the admin user can see the "Create New Post" and "Edit Post" and Delete buttons. âœ…
   
   b. Just because a user can't see the buttons, they can still manually access the /edit-post or /new-post or /delete routes. Protect these routes by creating a Python decorator called @admin_only. âœ…
   c. If the current_user's id is 1 then they can access those routes, otherwise, they should get a 403 error (not authorised). âœ…

4. Create relational databases
   a. Modify the User (Parent) and BlogPost (Child) class code to create a bidirectional One-to-Many relationship between the two tables. You should be able to easily locate the BlogPosts a User has written and also the User of any BlogPost object. 
   b. Modify the index.html and post.html pages so that the author name is still displayed in the right places. 
      The author property of BlogPost is now a User object.

5. Allow any usser to add comments to blog posts.
   a. Create a CommentForm in the form.py file it will only contain a single CKEditorField for users to write their comments. 
   b. Create a Table called Comment where the tablename is "comments". It should contain an id and a text property which will be the primary key and the text entered into the CKEditor.
   c. Establish a One to Many relationship Between the User Table (Parent) and the Comment table (Child). Where One User is linked to Many Comment objects. 
   d. Establish a One to Many relationship between each BlogPost object (Parent) and Comment object (Child). Where each BlogPost can have many associated Comment objects. 
   e. with a new Table added, it's a good idea to delete the existing blog.db entirely and to use the line db.create_all() to create all the tables from scratch. 
      This means you should create a new admin user (id == 1), a new blog post and another user who will make some comments.
   f. Log in as your John Doe user (or any user that is not the primary user) and make a comment on a blog post. In order for this to work, you will need to update the /post/<int:post_id> route. Make sure that only authenticated (logged-in) users can save their comment. Otherwise, they should see a flash message telling them to log in and redirect them to the /login route.
   g. Update the code in post.html to display all the comments associated with the blog post. 
      Gravatar images are used across the internet to provide an avatar image for blog commenters.
      
