Topic: Authentication with Flask

Project: Reguster, login and logout (authenticate) users with email and password so they can access their private profiles on our website.
- Allow users download a top secret Flask Programming Cheat Sheet, only after registering /signing up to our website.

Why Authenticate?
1. User activity generates useful user data.
2. Restrict access to website data depending on their status.

Lessons:
1. Use send_from_directory() to download files from the Flask server.

2. A Mixin is a way to provide multiple inheritance to Python. 
   This is how you add a Mixin: 
       class MyClass(MixinClassB, MixinClassA, BaseClass):
            pass
      
3. Handle error or sucess messages uwing flash("...")
   In the HTML template, get the messages using:
       {% with messages = get_flashed_messages() %}
       {% if messages %}
       {% for message in messages %}
       <p>{{ message }}</p>
       {% endfor %}
       {% endif %}
       {% endwith %}  

Steps:
0. Download starting project and install required packages. âœ…

1. Register new users. 
   a. Take the information the user has inputted in register.html and create a new User object with email, name and password to save into the users.db.  âœ…
   b. After registeration, take them straight to the secrets.html page.  âœ…
   c. The secrets.html page should say "Hello <insert name>". Where the name they typed in the registration form is displayed.  âœ…
   
2. Downloading files. 
   a. When the user accesses the secrets.html page, they should be able to download a secret file. âœ…
   b. In the secrets.html page, make the anchor tag make a GET request to your server at the path /download. âœ…
   c. In the download route, use send_from_directory() to download the cheat_sheet.pdf file when the user clicks on the "Download Your File" button. âœ…

3. Hashing Passwords using Werkzeug.
   a. Use the Werkzeug helper function generate_password_hash() to hash and salt the user's password. âœ…

4. Authenticating Users with Flask-Login
   Make sure that only registered/logged in users can see the secret page and download the file. 
   a. Configure your Flask app to use Flask_Login. âœ…
   b. Create a user_loader function. âœ…
   c. Implement / inherit from the UserMixin in your User class. âœ…
   d. Check the user's password using the check_password_hash() function. âœ…
   e. Find the user by the email they entered in the login form. âœ…
   f. If the user has successfully logged in or registered, you need to use the login_user() function to authenticate them. âœ…
   g. Both the /secrets and /download route need to be secured so that only authenticated users can access them. ðŸ”°âœ…
   h. Logout the user with the flask_login method logout_user() in the '/logout' route. âœ…

5. Flask Flash Messages
   a. Update the login route so that if the user's email doesn't exist in the database, show a Flash message to let them know and redirect them back to the login route. âœ…
      A <p> tag in the login page will show up as red text. 
   b. Update the login route so that if the check_password function returns False, show a Flash message to the user when you redirect them back to the login page. âœ…
   c. Update the /register route so that if the user enters an email that already exists in the database, you should redirect them to the login page and show a flash message to let them know they have already registered. ðŸ”°âœ…
   
6. Passing Authentication Status to Templates
   a. When a user is logged in, the home page should not show the login/register buttons. âœ…
      The navigation bar should not show Register or Login either. 
   b. Add the Logout button and code the logic to work similar to the Logout nav-link. âœ…
   
